// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: session-manager.proto

package manager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_None                    Action = 0
	Action_SessionCreated          Action = 1
	Action_SessionDeleted          Action = 2
	Action_SessionUserInvited      Action = 4
	Action_SessionUserRejected     Action = 8
	Action_SessionUserKicked       Action = 16
	Action_SessionUserJoined       Action = 32
	Action_SessionMembersChanged   Action = 64
	Action_SessionUpdated          Action = 128
	Action_SessionInviteTimeout    Action = 256
	Action_SessionInviteCancelled  Action = 512
	Action_DSStatusChanged         Action = 1024
	Action_SessionSync             Action = 2048
	Action_SessionStorageUpdated   Action = 4096
	Action_SessionUserLeave        Action = 8192
	Action_SessionUserConnected    Action = 16384
	Action_SessionUserDisconnected Action = 32768
	Action_SessionUserDropped      Action = 65536
	Action_SessionLeaderPromoted   Action = 131072
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:      "None",
		1:      "SessionCreated",
		2:      "SessionDeleted",
		4:      "SessionUserInvited",
		8:      "SessionUserRejected",
		16:     "SessionUserKicked",
		32:     "SessionUserJoined",
		64:     "SessionMembersChanged",
		128:    "SessionUpdated",
		256:    "SessionInviteTimeout",
		512:    "SessionInviteCancelled",
		1024:   "DSStatusChanged",
		2048:   "SessionSync",
		4096:   "SessionStorageUpdated",
		8192:   "SessionUserLeave",
		16384:  "SessionUserConnected",
		32768:  "SessionUserDisconnected",
		65536:  "SessionUserDropped",
		131072: "SessionLeaderPromoted",
	}
	Action_value = map[string]int32{
		"None":                    0,
		"SessionCreated":          1,
		"SessionDeleted":          2,
		"SessionUserInvited":      4,
		"SessionUserRejected":     8,
		"SessionUserKicked":       16,
		"SessionUserJoined":       32,
		"SessionMembersChanged":   64,
		"SessionUpdated":          128,
		"SessionInviteTimeout":    256,
		"SessionInviteCancelled":  512,
		"DSStatusChanged":         1024,
		"SessionSync":             2048,
		"SessionStorageUpdated":   4096,
		"SessionUserLeave":        8192,
		"SessionUserConnected":    16384,
		"SessionUserDisconnected": 32768,
		"SessionUserDropped":      65536,
		"SessionLeaderPromoted":   131072,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0}
}

type SessionCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *GameSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *SessionCreatedRequest) Reset() {
	*x = SessionCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCreatedRequest) ProtoMessage() {}

func (x *SessionCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCreatedRequest.ProtoReflect.Descriptor instead.
func (*SessionCreatedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0}
}

func (x *SessionCreatedRequest) GetSession() *GameSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type SessionUpdatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionOld *GameSession `protobuf:"bytes,1,opt,name=session_old,json=sessionOld,proto3" json:"session_old,omitempty"`
	SessionNew *GameSession `protobuf:"bytes,2,opt,name=session_new,json=sessionNew,proto3" json:"session_new,omitempty"`
	Action     Action       `protobuf:"varint,3,opt,name=action,proto3,enum=accelbyte.session.manager.Action" json:"action,omitempty"`
}

func (x *SessionUpdatedRequest) Reset() {
	*x = SessionUpdatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdatedRequest) ProtoMessage() {}

func (x *SessionUpdatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdatedRequest.ProtoReflect.Descriptor instead.
func (*SessionUpdatedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{1}
}

func (x *SessionUpdatedRequest) GetSessionOld() *GameSession {
	if x != nil {
		return x.SessionOld
	}
	return nil
}

func (x *SessionUpdatedRequest) GetSessionNew() *GameSession {
	if x != nil {
		return x.SessionNew
	}
	return nil
}

func (x *SessionUpdatedRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_None
}

type SessionDeletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *GameSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *SessionDeletedRequest) Reset() {
	*x = SessionDeletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeletedRequest) ProtoMessage() {}

func (x *SessionDeletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeletedRequest.ProtoReflect.Descriptor instead.
func (*SessionDeletedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{2}
}

func (x *SessionDeletedRequest) GetSession() *GameSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *GameSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{3}
}

func (x *SessionResponse) GetSession() *GameSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type GameSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retry            int32                      `protobuf:"varint,1,opt,name=retry,proto3" json:"retry,omitempty"`
	ProcessingTime   int64                      `protobuf:"varint,2,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"`
	MatchPool        string                     `protobuf:"bytes,3,opt,name=match_pool,json=matchPool,proto3" json:"match_pool,omitempty"`
	BackfillTicketId string                     `protobuf:"bytes,4,opt,name=backfill_ticket_id,json=backfillTicketId,proto3" json:"backfill_ticket_id,omitempty"`
	ServerName       string                     `protobuf:"bytes,5,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Step             string                     `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
	Code             string                     `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	TicketIds        []string                   `protobuf:"bytes,8,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	DsInformation    *GameSession_DSInformation `protobuf:"bytes,9,opt,name=ds_information,json=dsInformation,proto3" json:"ds_information,omitempty"`
	Session          *GameSession_BaseSession   `protobuf:"bytes,10,opt,name=session,proto3" json:"session,omitempty"`
	Teams            []*GameSession_Team        `protobuf:"bytes,11,rep,name=teams,proto3" json:"teams,omitempty"`
	Secret           string                     `protobuf:"bytes,12,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *GameSession) Reset() {
	*x = GameSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession) ProtoMessage() {}

func (x *GameSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession.ProtoReflect.Descriptor instead.
func (*GameSession) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4}
}

func (x *GameSession) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *GameSession) GetProcessingTime() int64 {
	if x != nil {
		return x.ProcessingTime
	}
	return 0
}

func (x *GameSession) GetMatchPool() string {
	if x != nil {
		return x.MatchPool
	}
	return ""
}

func (x *GameSession) GetBackfillTicketId() string {
	if x != nil {
		return x.BackfillTicketId
	}
	return ""
}

func (x *GameSession) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *GameSession) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *GameSession) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GameSession) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

func (x *GameSession) GetDsInformation() *GameSession_DSInformation {
	if x != nil {
		return x.DsInformation
	}
	return nil
}

func (x *GameSession) GetSession() *GameSession_BaseSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *GameSession) GetTeams() []*GameSession_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *GameSession) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes                *structpb.Struct `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	AutoJoin                  bool             `protobuf:"varint,2,opt,name=auto_join,json=autoJoin,proto3" json:"auto_join,omitempty"`
	InactiveTimeout           int32            `protobuf:"varint,3,opt,name=inactive_timeout,json=inactiveTimeout,proto3" json:"inactive_timeout,omitempty"`
	InviteTimeout             int32            `protobuf:"varint,4,opt,name=invite_timeout,json=inviteTimeout,proto3" json:"invite_timeout,omitempty"`
	Joinability               string           `protobuf:"bytes,5,opt,name=joinability,proto3" json:"joinability,omitempty"`
	LeaderElectionGracePeriod int32            `protobuf:"varint,6,opt,name=leader_election_grace_period,json=leaderElectionGracePeriod,proto3" json:"leader_election_grace_period,omitempty"`
	MaxPlayers                int32            `protobuf:"varint,7,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers                int32            `protobuf:"varint,8,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
	Persistent                bool             `protobuf:"varint,9,opt,name=persistent,proto3" json:"persistent,omitempty"`
	TextChat                  bool             `protobuf:"varint,10,opt,name=text_chat,json=textChat,proto3" json:"text_chat,omitempty"`
	DisableResendInvite       bool             `protobuf:"varint,11,opt,name=disable_resend_invite,json=disableResendInvite,proto3" json:"disable_resend_invite,omitempty"`
	Type                      string           `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{5}
}

func (x *Configuration) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Configuration) GetAutoJoin() bool {
	if x != nil {
		return x.AutoJoin
	}
	return false
}

func (x *Configuration) GetInactiveTimeout() int32 {
	if x != nil {
		return x.InactiveTimeout
	}
	return 0
}

func (x *Configuration) GetInviteTimeout() int32 {
	if x != nil {
		return x.InviteTimeout
	}
	return 0
}

func (x *Configuration) GetJoinability() string {
	if x != nil {
		return x.Joinability
	}
	return ""
}

func (x *Configuration) GetLeaderElectionGracePeriod() int32 {
	if x != nil {
		return x.LeaderElectionGracePeriod
	}
	return 0
}

func (x *Configuration) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *Configuration) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *Configuration) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

func (x *Configuration) GetTextChat() bool {
	if x != nil {
		return x.TextChat
	}
	return false
}

func (x *Configuration) GetDisableResendInvite() bool {
	if x != nil {
		return x.DisableResendInvite
	}
	return false
}

func (x *Configuration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusV2       string                 `protobuf:"bytes,3,opt,name=status_v2,json=statusV2,proto3" json:"status_v2,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PlatformId     string                 `protobuf:"bytes,5,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	PlatformUserId string                 `protobuf:"bytes,6,opt,name=platform_user_id,json=platformUserId,proto3" json:"platform_user_id,omitempty"`
	PreviousStatus string                 `protobuf:"bytes,7,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *User) GetStatusV2() string {
	if x != nil {
		return x.StatusV2
	}
	return ""
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *User) GetPlatformUserId() string {
	if x != nil {
		return x.PlatformUserId
	}
	return ""
}

func (x *User) GetPreviousStatus() string {
	if x != nil {
		return x.PreviousStatus
	}
	return ""
}

type BaseSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive          bool                   `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsFull            bool                   `protobuf:"varint,2,opt,name=is_full,json=isFull,proto3" json:"is_full,omitempty"`
	Version           int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Id                string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Namespace         string                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ConfigurationName string                 `protobuf:"bytes,7,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	LeaderId          string                 `protobuf:"bytes,8,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiredAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Attributes        *structpb.Struct       `protobuf:"bytes,12,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Storages          *structpb.Struct       `protobuf:"bytes,13,opt,name=storages,proto3" json:"storages,omitempty"`
	Configuration     *Configuration         `protobuf:"bytes,14,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Members           []*User                `protobuf:"bytes,15,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *BaseSession) Reset() {
	*x = BaseSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSession) ProtoMessage() {}

func (x *BaseSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSession.ProtoReflect.Descriptor instead.
func (*BaseSession) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{7}
}

func (x *BaseSession) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BaseSession) GetIsFull() bool {
	if x != nil {
		return x.IsFull
	}
	return false
}

func (x *BaseSession) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BaseSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseSession) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BaseSession) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *BaseSession) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *BaseSession) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *BaseSession) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BaseSession) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *BaseSession) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BaseSession) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *BaseSession) GetStorages() *structpb.Struct {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *BaseSession) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *BaseSession) GetMembers() []*User {
	if x != nil {
		return x.Members
	}
	return nil
}

type PartySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *BaseSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Code    string       `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *PartySession) Reset() {
	*x = PartySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartySession) ProtoMessage() {}

func (x *PartySession) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartySession.ProtoReflect.Descriptor instead.
func (*PartySession) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{8}
}

func (x *PartySession) GetSession() *BaseSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PartySession) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PartyCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *PartySession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *PartyCreatedRequest) Reset() {
	*x = PartyCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyCreatedRequest) ProtoMessage() {}

func (x *PartyCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyCreatedRequest.ProtoReflect.Descriptor instead.
func (*PartyCreatedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{9}
}

func (x *PartyCreatedRequest) GetSession() *PartySession {
	if x != nil {
		return x.Session
	}
	return nil
}

type PartyUpdatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionOld *PartySession `protobuf:"bytes,1,opt,name=session_old,json=sessionOld,proto3" json:"session_old,omitempty"`
	SessionNew *PartySession `protobuf:"bytes,2,opt,name=session_new,json=sessionNew,proto3" json:"session_new,omitempty"`
	Action     Action        `protobuf:"varint,3,opt,name=action,proto3,enum=accelbyte.session.manager.Action" json:"action,omitempty"`
}

func (x *PartyUpdatedRequest) Reset() {
	*x = PartyUpdatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyUpdatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyUpdatedRequest) ProtoMessage() {}

func (x *PartyUpdatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyUpdatedRequest.ProtoReflect.Descriptor instead.
func (*PartyUpdatedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PartyUpdatedRequest) GetSessionOld() *PartySession {
	if x != nil {
		return x.SessionOld
	}
	return nil
}

func (x *PartyUpdatedRequest) GetSessionNew() *PartySession {
	if x != nil {
		return x.SessionNew
	}
	return nil
}

func (x *PartyUpdatedRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_None
}

type PartyDeletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *PartySession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *PartyDeletedRequest) Reset() {
	*x = PartyDeletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyDeletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyDeletedRequest) ProtoMessage() {}

func (x *PartyDeletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyDeletedRequest.ProtoReflect.Descriptor instead.
func (*PartyDeletedRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{11}
}

func (x *PartyDeletedRequest) GetSession() *PartySession {
	if x != nil {
		return x.Session
	}
	return nil
}

type PartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *PartySession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *PartyResponse) Reset() {
	*x = PartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyResponse) ProtoMessage() {}

func (x *PartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyResponse.ProtoReflect.Descriptor instead.
func (*PartyResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{12}
}

func (x *PartyResponse) GetSession() *PartySession {
	if x != nil {
		return x.Session
	}
	return nil
}

type GameSession_BaseSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive          bool                                   `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsFull            bool                                   `protobuf:"varint,2,opt,name=is_full,json=isFull,proto3" json:"is_full,omitempty"`
	Version           int32                                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Id                string                                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Namespace         string                                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreatedBy         string                                 `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ConfigurationName string                                 `protobuf:"bytes,7,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	LeaderId          string                                 `protobuf:"bytes,8,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	CreatedAt         *timestamppb.Timestamp                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiredAt         *timestamppb.Timestamp                 `protobuf:"bytes,10,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp                 `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Attributes        *structpb.Struct                       `protobuf:"bytes,12,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Storages          *structpb.Struct                       `protobuf:"bytes,13,opt,name=storages,proto3" json:"storages,omitempty"`
	Configuration     *GameSession_BaseSession_Configuration `protobuf:"bytes,14,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Members           []*GameSession_BaseSession_User        `protobuf:"bytes,15,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GameSession_BaseSession) Reset() {
	*x = GameSession_BaseSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_BaseSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_BaseSession) ProtoMessage() {}

func (x *GameSession_BaseSession) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_BaseSession.ProtoReflect.Descriptor instead.
func (*GameSession_BaseSession) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GameSession_BaseSession) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GameSession_BaseSession) GetIsFull() bool {
	if x != nil {
		return x.IsFull
	}
	return false
}

func (x *GameSession_BaseSession) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GameSession_BaseSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameSession_BaseSession) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GameSession_BaseSession) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GameSession_BaseSession) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *GameSession_BaseSession) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *GameSession_BaseSession) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GameSession_BaseSession) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *GameSession_BaseSession) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GameSession_BaseSession) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GameSession_BaseSession) GetStorages() *structpb.Struct {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *GameSession_BaseSession) GetConfiguration() *GameSession_BaseSession_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *GameSession_BaseSession) GetMembers() []*GameSession_BaseSession_User {
	if x != nil {
		return x.Members
	}
	return nil
}

type GameSession_DSInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusV2    string                 `protobuf:"bytes,3,opt,name=status_v2,json=statusV2,proto3" json:"status_v2,omitempty"`
}

func (x *GameSession_DSInformation) Reset() {
	*x = GameSession_DSInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_DSInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_DSInformation) ProtoMessage() {}

func (x *GameSession_DSInformation) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_DSInformation.ProtoReflect.Descriptor instead.
func (*GameSession_DSInformation) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GameSession_DSInformation) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *GameSession_DSInformation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GameSession_DSInformation) GetStatusV2() string {
	if x != nil {
		return x.StatusV2
	}
	return ""
}

type GameSession_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds      []string                        `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	PartyMembers []*GameSession_Team_PartyMember `protobuf:"bytes,2,rep,name=party_members,json=partyMembers,proto3" json:"party_members,omitempty"`
}

func (x *GameSession_Team) Reset() {
	*x = GameSession_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_Team) ProtoMessage() {}

func (x *GameSession_Team) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_Team.ProtoReflect.Descriptor instead.
func (*GameSession_Team) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 2}
}

func (x *GameSession_Team) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GameSession_Team) GetPartyMembers() []*GameSession_Team_PartyMember {
	if x != nil {
		return x.PartyMembers
	}
	return nil
}

type GameSession_BaseSession_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes                *structpb.Struct `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	AutoJoin                  bool             `protobuf:"varint,2,opt,name=auto_join,json=autoJoin,proto3" json:"auto_join,omitempty"`
	InactiveTimeout           int32            `protobuf:"varint,3,opt,name=inactive_timeout,json=inactiveTimeout,proto3" json:"inactive_timeout,omitempty"`
	InviteTimeout             int32            `protobuf:"varint,4,opt,name=invite_timeout,json=inviteTimeout,proto3" json:"invite_timeout,omitempty"`
	Joinability               string           `protobuf:"bytes,5,opt,name=joinability,proto3" json:"joinability,omitempty"`
	LeaderElectionGracePeriod int32            `protobuf:"varint,6,opt,name=leader_election_grace_period,json=leaderElectionGracePeriod,proto3" json:"leader_election_grace_period,omitempty"`
	MaxPlayers                int32            `protobuf:"varint,7,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers                int32            `protobuf:"varint,8,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
	Persistent                bool             `protobuf:"varint,9,opt,name=persistent,proto3" json:"persistent,omitempty"`
	TextChat                  bool             `protobuf:"varint,10,opt,name=text_chat,json=textChat,proto3" json:"text_chat,omitempty"`
	DisableResendInvite       bool             `protobuf:"varint,11,opt,name=disable_resend_invite,json=disableResendInvite,proto3" json:"disable_resend_invite,omitempty"`
	Type                      string           `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GameSession_BaseSession_Configuration) Reset() {
	*x = GameSession_BaseSession_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_BaseSession_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_BaseSession_Configuration) ProtoMessage() {}

func (x *GameSession_BaseSession_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_BaseSession_Configuration.ProtoReflect.Descriptor instead.
func (*GameSession_BaseSession_Configuration) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *GameSession_BaseSession_Configuration) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GameSession_BaseSession_Configuration) GetAutoJoin() bool {
	if x != nil {
		return x.AutoJoin
	}
	return false
}

func (x *GameSession_BaseSession_Configuration) GetInactiveTimeout() int32 {
	if x != nil {
		return x.InactiveTimeout
	}
	return 0
}

func (x *GameSession_BaseSession_Configuration) GetInviteTimeout() int32 {
	if x != nil {
		return x.InviteTimeout
	}
	return 0
}

func (x *GameSession_BaseSession_Configuration) GetJoinability() string {
	if x != nil {
		return x.Joinability
	}
	return ""
}

func (x *GameSession_BaseSession_Configuration) GetLeaderElectionGracePeriod() int32 {
	if x != nil {
		return x.LeaderElectionGracePeriod
	}
	return 0
}

func (x *GameSession_BaseSession_Configuration) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *GameSession_BaseSession_Configuration) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *GameSession_BaseSession_Configuration) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

func (x *GameSession_BaseSession_Configuration) GetTextChat() bool {
	if x != nil {
		return x.TextChat
	}
	return false
}

func (x *GameSession_BaseSession_Configuration) GetDisableResendInvite() bool {
	if x != nil {
		return x.DisableResendInvite
	}
	return false
}

func (x *GameSession_BaseSession_Configuration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GameSession_BaseSession_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusV2       string                 `protobuf:"bytes,3,opt,name=status_v2,json=statusV2,proto3" json:"status_v2,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PlatformId     string                 `protobuf:"bytes,5,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	PlatformUserId string                 `protobuf:"bytes,6,opt,name=platform_user_id,json=platformUserId,proto3" json:"platform_user_id,omitempty"`
	PreviousStatus string                 `protobuf:"bytes,7,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
}

func (x *GameSession_BaseSession_User) Reset() {
	*x = GameSession_BaseSession_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_BaseSession_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_BaseSession_User) ProtoMessage() {}

func (x *GameSession_BaseSession_User) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_BaseSession_User.ProtoReflect.Descriptor instead.
func (*GameSession_BaseSession_User) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *GameSession_BaseSession_User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameSession_BaseSession_User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GameSession_BaseSession_User) GetStatusV2() string {
	if x != nil {
		return x.StatusV2
	}
	return ""
}

func (x *GameSession_BaseSession_User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GameSession_BaseSession_User) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *GameSession_BaseSession_User) GetPlatformUserId() string {
	if x != nil {
		return x.PlatformUserId
	}
	return ""
}

func (x *GameSession_BaseSession_User) GetPreviousStatus() string {
	if x != nil {
		return x.PreviousStatus
	}
	return ""
}

type GameSession_Team_PartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GameSession_Team_PartyMember) Reset() {
	*x = GameSession_Team_PartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession_Team_PartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession_Team_PartyMember) ProtoMessage() {}

func (x *GameSession_Team_PartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession_Team_PartyMember.ProtoReflect.Descriptor instead.
func (*GameSession_Team_PartyMember) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4, 2, 0}
}

func (x *GameSession_Team_PartyMember) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *GameSession_Team_PartyMember) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

var File_session_manager_proto protoreflect.FileDescriptor

var file_session_manager_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59,
	0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x59, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x0f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x88, 0x12, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0xb1, 0x0b, 0x0a, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0xe1, 0x03,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f,
	0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x83,
	0x01, 0x0a, 0x0d, 0x44, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x32, 0x1a, 0xc4, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x43, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x05, 0x0a,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x64, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xe4, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6c,
	0x64, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x52, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xce, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x20,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x80, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x80, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x80, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x80, 0x08, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x80, 0x10,
	0x12, 0x1a, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x80, 0x20, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x10, 0x80, 0x40, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x80, 0x80, 0x01, 0x12,
	0x1d, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x80, 0x80, 0x02, 0x12, 0x18,
	0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x10, 0x80, 0x80, 0x04, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x10, 0x80, 0x80, 0x08, 0x32, 0xde, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x10, 0x4f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x4f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x10, 0x4f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0e, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0e,
	0x4f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2e,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x5c, 0x0a, 0x1d, 0x6e, 0x65, 0x74, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xaa, 0x02, 0x19, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_session_manager_proto_rawDescOnce sync.Once
	file_session_manager_proto_rawDescData = file_session_manager_proto_rawDesc
)

func file_session_manager_proto_rawDescGZIP() []byte {
	file_session_manager_proto_rawDescOnce.Do(func() {
		file_session_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_session_manager_proto_rawDescData)
	})
	return file_session_manager_proto_rawDescData
}

var file_session_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_session_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_session_manager_proto_goTypes = []interface{}{
	(Action)(0),                                   // 0: accelbyte.session.manager.Action
	(*SessionCreatedRequest)(nil),                 // 1: accelbyte.session.manager.SessionCreatedRequest
	(*SessionUpdatedRequest)(nil),                 // 2: accelbyte.session.manager.SessionUpdatedRequest
	(*SessionDeletedRequest)(nil),                 // 3: accelbyte.session.manager.SessionDeletedRequest
	(*SessionResponse)(nil),                       // 4: accelbyte.session.manager.SessionResponse
	(*GameSession)(nil),                           // 5: accelbyte.session.manager.GameSession
	(*Configuration)(nil),                         // 6: accelbyte.session.manager.Configuration
	(*User)(nil),                                  // 7: accelbyte.session.manager.User
	(*BaseSession)(nil),                           // 8: accelbyte.session.manager.BaseSession
	(*PartySession)(nil),                          // 9: accelbyte.session.manager.PartySession
	(*PartyCreatedRequest)(nil),                   // 10: accelbyte.session.manager.PartyCreatedRequest
	(*PartyUpdatedRequest)(nil),                   // 11: accelbyte.session.manager.PartyUpdatedRequest
	(*PartyDeletedRequest)(nil),                   // 12: accelbyte.session.manager.PartyDeletedRequest
	(*PartyResponse)(nil),                         // 13: accelbyte.session.manager.PartyResponse
	(*GameSession_BaseSession)(nil),               // 14: accelbyte.session.manager.GameSession.BaseSession
	(*GameSession_DSInformation)(nil),             // 15: accelbyte.session.manager.GameSession.DSInformation
	(*GameSession_Team)(nil),                      // 16: accelbyte.session.manager.GameSession.Team
	(*GameSession_BaseSession_Configuration)(nil), // 17: accelbyte.session.manager.GameSession.BaseSession.Configuration
	(*GameSession_BaseSession_User)(nil),          // 18: accelbyte.session.manager.GameSession.BaseSession.User
	(*GameSession_Team_PartyMember)(nil),          // 19: accelbyte.session.manager.GameSession.Team.PartyMember
	(*structpb.Struct)(nil),                       // 20: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                 // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 22: google.protobuf.Empty
}
var file_session_manager_proto_depIdxs = []int32{
	5,  // 0: accelbyte.session.manager.SessionCreatedRequest.session:type_name -> accelbyte.session.manager.GameSession
	5,  // 1: accelbyte.session.manager.SessionUpdatedRequest.session_old:type_name -> accelbyte.session.manager.GameSession
	5,  // 2: accelbyte.session.manager.SessionUpdatedRequest.session_new:type_name -> accelbyte.session.manager.GameSession
	0,  // 3: accelbyte.session.manager.SessionUpdatedRequest.action:type_name -> accelbyte.session.manager.Action
	5,  // 4: accelbyte.session.manager.SessionDeletedRequest.session:type_name -> accelbyte.session.manager.GameSession
	5,  // 5: accelbyte.session.manager.SessionResponse.session:type_name -> accelbyte.session.manager.GameSession
	15, // 6: accelbyte.session.manager.GameSession.ds_information:type_name -> accelbyte.session.manager.GameSession.DSInformation
	14, // 7: accelbyte.session.manager.GameSession.session:type_name -> accelbyte.session.manager.GameSession.BaseSession
	16, // 8: accelbyte.session.manager.GameSession.teams:type_name -> accelbyte.session.manager.GameSession.Team
	20, // 9: accelbyte.session.manager.Configuration.attributes:type_name -> google.protobuf.Struct
	21, // 10: accelbyte.session.manager.User.updated_at:type_name -> google.protobuf.Timestamp
	21, // 11: accelbyte.session.manager.BaseSession.created_at:type_name -> google.protobuf.Timestamp
	21, // 12: accelbyte.session.manager.BaseSession.expired_at:type_name -> google.protobuf.Timestamp
	21, // 13: accelbyte.session.manager.BaseSession.updated_at:type_name -> google.protobuf.Timestamp
	20, // 14: accelbyte.session.manager.BaseSession.attributes:type_name -> google.protobuf.Struct
	20, // 15: accelbyte.session.manager.BaseSession.storages:type_name -> google.protobuf.Struct
	6,  // 16: accelbyte.session.manager.BaseSession.configuration:type_name -> accelbyte.session.manager.Configuration
	7,  // 17: accelbyte.session.manager.BaseSession.members:type_name -> accelbyte.session.manager.User
	8,  // 18: accelbyte.session.manager.PartySession.session:type_name -> accelbyte.session.manager.BaseSession
	9,  // 19: accelbyte.session.manager.PartyCreatedRequest.session:type_name -> accelbyte.session.manager.PartySession
	9,  // 20: accelbyte.session.manager.PartyUpdatedRequest.session_old:type_name -> accelbyte.session.manager.PartySession
	9,  // 21: accelbyte.session.manager.PartyUpdatedRequest.session_new:type_name -> accelbyte.session.manager.PartySession
	0,  // 22: accelbyte.session.manager.PartyUpdatedRequest.action:type_name -> accelbyte.session.manager.Action
	9,  // 23: accelbyte.session.manager.PartyDeletedRequest.session:type_name -> accelbyte.session.manager.PartySession
	9,  // 24: accelbyte.session.manager.PartyResponse.session:type_name -> accelbyte.session.manager.PartySession
	21, // 25: accelbyte.session.manager.GameSession.BaseSession.created_at:type_name -> google.protobuf.Timestamp
	21, // 26: accelbyte.session.manager.GameSession.BaseSession.expired_at:type_name -> google.protobuf.Timestamp
	21, // 27: accelbyte.session.manager.GameSession.BaseSession.updated_at:type_name -> google.protobuf.Timestamp
	20, // 28: accelbyte.session.manager.GameSession.BaseSession.attributes:type_name -> google.protobuf.Struct
	20, // 29: accelbyte.session.manager.GameSession.BaseSession.storages:type_name -> google.protobuf.Struct
	17, // 30: accelbyte.session.manager.GameSession.BaseSession.configuration:type_name -> accelbyte.session.manager.GameSession.BaseSession.Configuration
	18, // 31: accelbyte.session.manager.GameSession.BaseSession.members:type_name -> accelbyte.session.manager.GameSession.BaseSession.User
	21, // 32: accelbyte.session.manager.GameSession.DSInformation.requested_at:type_name -> google.protobuf.Timestamp
	19, // 33: accelbyte.session.manager.GameSession.Team.party_members:type_name -> accelbyte.session.manager.GameSession.Team.PartyMember
	20, // 34: accelbyte.session.manager.GameSession.BaseSession.Configuration.attributes:type_name -> google.protobuf.Struct
	21, // 35: accelbyte.session.manager.GameSession.BaseSession.User.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 36: accelbyte.session.manager.SessionManager.OnSessionCreated:input_type -> accelbyte.session.manager.SessionCreatedRequest
	2,  // 37: accelbyte.session.manager.SessionManager.OnSessionUpdated:input_type -> accelbyte.session.manager.SessionUpdatedRequest
	3,  // 38: accelbyte.session.manager.SessionManager.OnSessionDeleted:input_type -> accelbyte.session.manager.SessionDeletedRequest
	10, // 39: accelbyte.session.manager.SessionManager.OnPartyCreated:input_type -> accelbyte.session.manager.PartyCreatedRequest
	11, // 40: accelbyte.session.manager.SessionManager.OnPartyUpdated:input_type -> accelbyte.session.manager.PartyUpdatedRequest
	12, // 41: accelbyte.session.manager.SessionManager.OnPartyDeleted:input_type -> accelbyte.session.manager.PartyDeletedRequest
	4,  // 42: accelbyte.session.manager.SessionManager.OnSessionCreated:output_type -> accelbyte.session.manager.SessionResponse
	22, // 43: accelbyte.session.manager.SessionManager.OnSessionUpdated:output_type -> google.protobuf.Empty
	22, // 44: accelbyte.session.manager.SessionManager.OnSessionDeleted:output_type -> google.protobuf.Empty
	13, // 45: accelbyte.session.manager.SessionManager.OnPartyCreated:output_type -> accelbyte.session.manager.PartyResponse
	22, // 46: accelbyte.session.manager.SessionManager.OnPartyUpdated:output_type -> google.protobuf.Empty
	22, // 47: accelbyte.session.manager.SessionManager.OnPartyDeleted:output_type -> google.protobuf.Empty
	42, // [42:48] is the sub-list for method output_type
	36, // [36:42] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_session_manager_proto_init() }
func file_session_manager_proto_init() {
	if File_session_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_session_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyUpdatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyDeletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_BaseSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_DSInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_BaseSession_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_BaseSession_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession_Team_PartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_session_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_session_manager_proto_goTypes,
		DependencyIndexes: file_session_manager_proto_depIdxs,
		EnumInfos:         file_session_manager_proto_enumTypes,
		MessageInfos:      file_session_manager_proto_msgTypes,
	}.Build()
	File_session_manager_proto = out.File
	file_session_manager_proto_rawDesc = nil
	file_session_manager_proto_goTypes = nil
	file_session_manager_proto_depIdxs = nil
}
